{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-04T10:36:01.635Z",
    "end": "2021-02-04T10:36:29.889Z",
    "duration": 28254,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "113246e3-5fb1-4d4f-9cc6-7854359497fe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "546f8b49-c5c2-4e45-bbd8-d76f797c1f0d",
          "title": "GET /weatherAPI/opendata/weather.php",
          "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
          "file": "/testRunner.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
              "title": "Verify Weather Information from Current Weather Report Dataset",
              "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
              "file": "/testRunner.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return data with valid dataType in English",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with valid dataType in English",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "6401809a-0a1f-4c1c-9394-47e3e84f6e11",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return data with valid dataType in Traditional Chinese",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with valid dataType in Traditional Chinese",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "16b6b8fa-8181-4230-a1ef-78e471ca2f7a",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return data with valid dataType in Simplified Chinese",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with valid dataType in Simplified Chinese",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "2798fbc5-7bd2-4afb-9c36-0a6215f92233",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return data with empty language",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with empty language",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "0554724e-0192-4a33-88bc-a7fb1331b986",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with invalid dataType",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with invalid dataType",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "e77ff8a4-3f98-4ca1-975c-8df16fce2081",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with invalid language",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with invalid language",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "01e8a018-12b3-4d81-be14-a2b2860e959f",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with empty dataType",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with empty dataType",
                  "timedOut": false,
                  "duration": 133,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "8ecb6ab8-5f2a-4238-bf4e-98c13ca8e356",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with empty query",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with empty query",
                  "timedOut": false,
                  "duration": 137,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "e71ebc77-b039-4ee5-a0c7-11d5d3e54582",
                  "parentUUID": "c2ed06af-cc65-4cb9-ac1f-2c51c4d9a0d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6401809a-0a1f-4c1c-9394-47e3e84f6e11",
                "16b6b8fa-8181-4230-a1ef-78e471ca2f7a",
                "2798fbc5-7bd2-4afb-9c36-0a6215f92233",
                "0554724e-0192-4a33-88bc-a7fb1331b986",
                "e77ff8a4-3f98-4ca1-975c-8df16fce2081",
                "01e8a018-12b3-4d81-be14-a2b2860e959f",
                "8ecb6ab8-5f2a-4238-bf4e-98c13ca8e356",
                "e71ebc77-b039-4ee5-a0c7-11d5d3e54582"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1129,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "0f1962e9-e5ff-49bd-af4b-82fc001d8881",
          "title": "Binary File execute",
          "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
          "file": "/testRunner.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c2fa6ac8-266a-4658-9bb2-913d398d6ed6",
              "title": "Verify health check file to return as expected",
              "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
              "file": "/testRunner.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return It's work when http response code is 200",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should return It's work when http response code is 200",
                  "timedOut": false,
                  "duration": 3026,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        spawn(\"node\", [proxyPath,\"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        // sleep for few second to wait for proxy server run\n        await sleep(3 * seconds)\n        \n        // start execute binary file through http proxy\n        var binaryExecute =  spawnSync(binaryPath, {\n            timeout:20*seconds,\n            encoding: 'utf-8',\n            env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n        });\n        chai.expect(binaryExecute.error).undefined\n        switch (expect) {\n            case timeoutMessage:\n                chai.expect(binaryExecute.stderr.toString()).include(expect)\n                break;\n            case successMessage:\n                chai.expect(binaryExecute.stdout.toString()).include(expect)\n                break;\n            default:\n                chai.expect(binaryExecute.stdout.toString()).include(code)\n                break;\n        }",
                  "err": {},
                  "uuid": "2c60620d-34c0-4328-9e98-d4f193afc447",
                  "parentUUID": "c2fa6ac8-266a-4658-9bb2-913d398d6ed6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 500 when http response code is 500",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should return 500 when http response code is 500",
                  "timedOut": false,
                  "duration": 3032,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        spawn(\"node\", [proxyPath,\"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        // sleep for few second to wait for proxy server run\n        await sleep(3 * seconds)\n        \n        // start execute binary file through http proxy\n        var binaryExecute =  spawnSync(binaryPath, {\n            timeout:20*seconds,\n            encoding: 'utf-8',\n            env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n        });\n        chai.expect(binaryExecute.error).undefined\n        switch (expect) {\n            case timeoutMessage:\n                chai.expect(binaryExecute.stderr.toString()).include(expect)\n                break;\n            case successMessage:\n                chai.expect(binaryExecute.stdout.toString()).include(expect)\n                break;\n            default:\n                chai.expect(binaryExecute.stdout.toString()).include(code)\n                break;\n        }",
                  "err": {},
                  "uuid": "5314ef26-1915-4722-bf2e-9accd316462a",
                  "parentUUID": "c2fa6ac8-266a-4658-9bb2-913d398d6ed6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 when http response code is 400",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should return 400 when http response code is 400",
                  "timedOut": false,
                  "duration": 3023,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        spawn(\"node\", [proxyPath,\"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        // sleep for few second to wait for proxy server run\n        await sleep(3 * seconds)\n        \n        // start execute binary file through http proxy\n        var binaryExecute =  spawnSync(binaryPath, {\n            timeout:20*seconds,\n            encoding: 'utf-8',\n            env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n        });\n        chai.expect(binaryExecute.error).undefined\n        switch (expect) {\n            case timeoutMessage:\n                chai.expect(binaryExecute.stderr.toString()).include(expect)\n                break;\n            case successMessage:\n                chai.expect(binaryExecute.stdout.toString()).include(expect)\n                break;\n            default:\n                chai.expect(binaryExecute.stdout.toString()).include(code)\n                break;\n        }",
                  "err": {},
                  "uuid": "851d35f8-db12-431f-88d7-1541bf68899d",
                  "parentUUID": "c2fa6ac8-266a-4658-9bb2-913d398d6ed6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should terminate if server took too long to finish request",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should terminate if server took too long to finish request",
                  "timedOut": false,
                  "duration": 18026,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        spawn(\"node\", [proxyPath,\"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        // sleep for few second to wait for proxy server run\n        await sleep(3 * seconds)\n        \n        // start execute binary file through http proxy\n        var binaryExecute =  spawnSync(binaryPath, {\n            timeout:20*seconds,\n            encoding: 'utf-8',\n            env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n        });\n        chai.expect(binaryExecute.error).undefined\n        switch (expect) {\n            case timeoutMessage:\n                chai.expect(binaryExecute.stderr.toString()).include(expect)\n                break;\n            case successMessage:\n                chai.expect(binaryExecute.stdout.toString()).include(expect)\n                break;\n            default:\n                chai.expect(binaryExecute.stdout.toString()).include(code)\n                break;\n        }",
                  "err": {},
                  "uuid": "913eb719-aa11-41b3-935c-ed03b9f4fac2",
                  "parentUUID": "c2fa6ac8-266a-4658-9bb2-913d398d6ed6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c60620d-34c0-4328-9e98-d4f193afc447",
                "5314ef26-1915-4722-bf2e-9accd316462a",
                "851d35f8-db12-431f-88d7-1541bf68899d",
                "913eb719-aa11-41b3-935c-ed03b9f4fac2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}