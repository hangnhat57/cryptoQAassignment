{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-04T07:42:13.656Z",
    "end": "2021-02-04T07:42:14.677Z",
    "duration": 1021,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "79012edf-475d-4140-8ab3-b4709f7a3250",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1532c173-887b-465e-a21d-690e0036a517",
          "title": "GET /weatherAPI/opendata/weather.php",
          "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
          "file": "/testRunner.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "54c26b70-f397-42c1-a279-933e79dfac86",
              "title": "Verify Weather Information from Current Weather Report Dataset",
              "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
              "file": "/testRunner.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return data with valid dataType in English",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with valid dataType in English",
                  "timedOut": false,
                  "duration": 136,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "bcfbbff7-443c-41ab-bce8-c6b37cb0ebb3",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return data with valid dataType in Traditional Chinese",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with valid dataType in Traditional Chinese",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "23672818-1202-416d-a442-b9b5740e3097",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return data with valid dataType in Simplified Chinese",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with valid dataType in Simplified Chinese",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "cd7d2404-dacb-4a0a-bd22-ee8317bd6e5b",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return data with empty language",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return data with empty language",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "4752ac42-f866-496d-a4e4-9dc9dd094973",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with invalid dataType",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with invalid dataType",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "61a42039-63cf-41c5-b824-a511b2d5db48",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with invalid language",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with invalid language",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "c3d61264-113f-4453-8159-7bff73f6776e",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with empty dataType",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with empty dataType",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "b6794850-977f-4e20-bf19-85c9905522a4",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return error with empty query",
                  "fullTitle": "GET /weatherAPI/opendata/weather.php Verify Weather Information from Current Weather Report Dataset Should return error with empty query",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Send http request to endpoint\nsupertest\n    .get('weatherAPI/opendata/weather.php')\n    .query({ dataType: dataType, lang: lang })\n    .expect(function (res) {\n        // Read the JSON Schema \n        var schema = JSON.parse(fs.readFileSync(schemaPath));\n        if (isHappyCase) {\n            // Validate json schema if no error\n            chai.assert.equal(validate(res.body, schema).errors.length, 0,validate(res.body, schema).errors.toString);\n        } else {\n            // validate response text to be error\n            chai.expect(res.text).include(err);\n        }\n    })\n    .expect(200, done);",
                  "err": {},
                  "uuid": "fe04813d-dd87-4e65-abfc-03241c5c6e04",
                  "parentUUID": "54c26b70-f397-42c1-a279-933e79dfac86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcfbbff7-443c-41ab-bce8-c6b37cb0ebb3",
                "23672818-1202-416d-a442-b9b5740e3097",
                "cd7d2404-dacb-4a0a-bd22-ee8317bd6e5b",
                "4752ac42-f866-496d-a4e4-9dc9dd094973",
                "61a42039-63cf-41c5-b824-a511b2d5db48",
                "c3d61264-113f-4453-8159-7bff73f6776e",
                "b6794850-977f-4e20-bf19-85c9905522a4",
                "fe04813d-dd87-4e65-abfc-03241c5c6e04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 995,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7b618569-46a8-4c79-bf6d-d1b2e468b3c6",
          "title": "Binary File execute",
          "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
          "file": "/testRunner.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "922d707f-d346-4e45-9c93-08ac1a26b6e8",
              "title": "Verify health check file to return as expected",
              "fullFile": "/Users/nguyenhoangnhat/Code/cryto-com-qa/crypto-com-qa/testRunner.js",
              "file": "/testRunner.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return It's work when http response code is 200",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should return It's work when http response code is 200",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        let proxy = spawn(\"node\", [proxyPath, \"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        proxy.stdout.on('data', data => {\n            // start execute binary file through http proxy\n            var binaryExecute = spawnSync(binaryPath, {\n                timeout: 20 * seconds,\n                encoding: 'utf-8',\n                env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n            });\n            chai.expect(binaryExecute.error).undefined\n            switch (expect) {\n                case timeoutMessage:\n                    chai.expect(binaryExecute.stderr.toString()).include(expect)\n                    break;\n                case successMessage:\n                    chai.expect(binaryExecute.stdout.toString()).include(expect)\n                    break;\n                default:\n                    chai.expect(binaryExecute.stdout.toString()).include(code)\n                    break;\n            }\n        })\n        // sleep for few second to wait for proxy server run\n        // await sleep(3 * seconds)",
                  "err": {},
                  "uuid": "16f3de02-fbb8-46d3-80f5-768bea9bfb85",
                  "parentUUID": "922d707f-d346-4e45-9c93-08ac1a26b6e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 500 when http response code is 500",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should return 500 when http response code is 500",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        let proxy = spawn(\"node\", [proxyPath, \"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        proxy.stdout.on('data', data => {\n            // start execute binary file through http proxy\n            var binaryExecute = spawnSync(binaryPath, {\n                timeout: 20 * seconds,\n                encoding: 'utf-8',\n                env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n            });\n            chai.expect(binaryExecute.error).undefined\n            switch (expect) {\n                case timeoutMessage:\n                    chai.expect(binaryExecute.stderr.toString()).include(expect)\n                    break;\n                case successMessage:\n                    chai.expect(binaryExecute.stdout.toString()).include(expect)\n                    break;\n                default:\n                    chai.expect(binaryExecute.stdout.toString()).include(code)\n                    break;\n            }\n        })\n        // sleep for few second to wait for proxy server run\n        // await sleep(3 * seconds)",
                  "err": {},
                  "uuid": "785c4ee6-ac39-4fea-b743-3c94ccb64b89",
                  "parentUUID": "922d707f-d346-4e45-9c93-08ac1a26b6e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 when http response code is 400",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should return 400 when http response code is 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        let proxy = spawn(\"node\", [proxyPath, \"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        proxy.stdout.on('data', data => {\n            // start execute binary file through http proxy\n            var binaryExecute = spawnSync(binaryPath, {\n                timeout: 20 * seconds,\n                encoding: 'utf-8',\n                env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n            });\n            chai.expect(binaryExecute.error).undefined\n            switch (expect) {\n                case timeoutMessage:\n                    chai.expect(binaryExecute.stderr.toString()).include(expect)\n                    break;\n                case successMessage:\n                    chai.expect(binaryExecute.stdout.toString()).include(expect)\n                    break;\n                default:\n                    chai.expect(binaryExecute.stdout.toString()).include(code)\n                    break;\n            }\n        })\n        // sleep for few second to wait for proxy server run\n        // await sleep(3 * seconds)",
                  "err": {},
                  "uuid": "815fb19c-6c75-4664-bba9-11461a987f84",
                  "parentUUID": "922d707f-d346-4e45-9c93-08ac1a26b6e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should terminate if server took too long to finish request",
                  "fullTitle": "Binary File execute Verify health check file to return as expected Should terminate if server took too long to finish request",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Start Proxy server in background\n        let proxy = spawn(\"node\", [proxyPath, \"&\"],\n            {\n                env: { ...process.env, CODE: code, DELAY: delay * seconds },\n                encoding: 'utf-8',\n                detached: true\n            })\n        proxy.stdout.on('data', data => {\n            // start execute binary file through http proxy\n            var binaryExecute = spawnSync(binaryPath, {\n                timeout: 20 * seconds,\n                encoding: 'utf-8',\n                env: { ...process.env, http_proxy: \"127.0.0.1:5050\" }\n            });\n            chai.expect(binaryExecute.error).undefined\n            switch (expect) {\n                case timeoutMessage:\n                    chai.expect(binaryExecute.stderr.toString()).include(expect)\n                    break;\n                case successMessage:\n                    chai.expect(binaryExecute.stdout.toString()).include(expect)\n                    break;\n                default:\n                    chai.expect(binaryExecute.stdout.toString()).include(code)\n                    break;\n            }\n        })\n        // sleep for few second to wait for proxy server run\n        // await sleep(3 * seconds)",
                  "err": {},
                  "uuid": "839ea921-16c2-4ca0-a43e-e85f80f3232d",
                  "parentUUID": "922d707f-d346-4e45-9c93-08ac1a26b6e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16f3de02-fbb8-46d3-80f5-768bea9bfb85",
                "785c4ee6-ac39-4fea-b743-3c94ccb64b89",
                "815fb19c-6c75-4664-bba9-11461a987f84",
                "839ea921-16c2-4ca0-a43e-e85f80f3232d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}